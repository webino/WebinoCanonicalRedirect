<?php
/**
 * Webino (http://webino.sk)
 *
 * @link        https://github.com/webino/WebinoCanonicalRedirect for the canonical source repository
 * @copyright   Copyright (c) 2013 Webino, s. r. o. (http://webino.sk)
 * @author      Peter Bačinský <peter@bacinsky.sk>
 * @license     New BSD License
 */

namespace WebinoCanonicalRedirect;

use Zend\Mvc\MvcEvent;

/**
 * Generated by PHPUnit on 2013-02-16 at 12:59:36.
 */
class ModuleTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Module
     */
    protected $object;

    /**
     * @var \PHPUnit_Framework_MockObject_MockObject
     */
    protected $canonicalizer;

    /**
     * @var \PHPUnit_Framework_MockObject_MockObject
     */
    protected $event;

    /**
     * @var \PHPUnit_Framework_MockObject_MockObject
     */
    protected $events;

    /**
     * @var \PHPUnit_Framework_MockObject_MockObject
     */
    protected $options;

    /**
     * @var \PHPUnit_Framework_MockObject_MockObject
     */
    protected $request;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Module;

        $app = $this->getMock('Zend\Mvc\Application', array(), array(), '', false);
        $this->canonicalizer = $this->getMock(
            'WebinoCanonicalRedirect\Uri\Canonicalizer',
            array(),
            array(),
            '',
            false
        );
        $this->event   = $this->getMock('Zend\Mvc\MvcEvent');
        $this->events  = $this->getMock('Zend\EventManager\EventManager');
        $this->options = $this->getMock('WebinoCanonicalRedirect\Options\ModuleOptions');
        $this->request = $this->getMock('Zend\Http\Request');
        $services      = $this->getMock('Zend\ServiceManager\ServiceManager');

        $this->event->expects($this->any())
            ->method('getApplication')
            ->will($this->returnValue($app));

        $app->expects($this->any())
            ->method('getServiceManager')
            ->will($this->returnValue($services));

        $app->expects($this->any())
            ->method('getEventManager')
            ->will($this->returnValue($this->events));

        $testCase = $this; // TODO PHP 5.4
        $services->expects($this->any())
            ->method('get')
            ->will(
                $this->returnCallback(
                    function ($serviceName) use ($testCase) {
                        switch ($serviceName) {

                            case 'WebinoCanonicalRedirect\Options\ModuleOptions':
                                return $testCase->options;

                            case 'WebinoCanonicalRedirect\Uri\Canonicalizer':
                                return $testCase->canonicalizer;

                            default:
                                $testCase->fail('Unexpected service ' . $serviceName);
                        }
                    }
                )
            );

        $this->options->expects($this->any())
            ->method('useWww')
            ->will($this->returnValue(true));

        $this->options->expects($this->any())
            ->method('useSlash')
            ->will($this->returnValue(true));
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * @covers WebinoCanonicalRedirect\Module::getConfig
     */
    public function testGetConfig()
    {
        $this->assertInternalType('array', $this->object->getConfig());
    }

    /**
     * @covers WebinoCanonicalRedirect\Module::getAutoloaderConfig
     */
    public function testGetAutoloaderConfig()
    {
        $this->assertInternalType('array', $this->object->getAutoloaderConfig());
    }

    /**
     * @covers WebinoCanonicalRedirect\Module::onBootstrap
     */
    public function testOnBootstrap()
    {
        $response = $this->getMock('Zend\Http\Response');
        $headers  = $this->getMock('Zend\Http\Headers');

        $this->event->expects($this->any())
            ->method('getRequest')
            ->will($this->returnValue($this->request));

        $this->options->expects($this->once())
            ->method('isEnabled')
            ->will($this->returnValue(true));

        $this->canonicalizer->expects($this->once())
            ->method('www')
            ->with(true)
            ->will($this->returnValue($this->canonicalizer));

        $this->canonicalizer->expects($this->once())
            ->method('trailingSlash')
            ->with(true);

        $this->canonicalizer->expects($this->once())
            ->method('isCanonicalized')
            ->will($this->returnValue(true));

        $this->event->expects($this->once())
            ->method('stopPropagation');

        $this->event->expects($this->once())
            ->method('getResponse')
            ->will($this->returnValue($response));

        $response->expects($this->once())
            ->method('setStatusCode')
            ->with(301)
            ->will($this->returnValue($response));

        $response->expects($this->once())
            ->method('getHeaders')
            ->will($this->returnValue($headers));

        $headers->expects($this->once())
            ->method('addHeaderLine')
            ->with('Location', $this->canonicalizer);

        $this->events->expects($this->once())
            ->method('trigger')
            ->with(MvcEvent::EVENT_FINISH, $this->event);

        $this->object->onBootstrap($this->event);
    }

    /**
     * @covers WebinoCanonicalRedirect\Module::onBootstrap
     */
    public function testOnBootstrapUriNotCanonicalized()
    {
        $this->event->expects($this->any())
            ->method('getRequest')
            ->will($this->returnValue($this->request));

        $this->options->expects($this->once())
            ->method('isEnabled')
            ->will($this->returnValue(true));

        $this->canonicalizer->expects($this->once())
            ->method('www')
            ->will($this->returnValue($this->canonicalizer));

        $this->canonicalizer->expects($this->once())
            ->method('isCanonicalized')
            ->will($this->returnValue(false));

        $this->event->expects($this->never())
            ->method('stopPropagation');

        $this->event->expects($this->never())
            ->method('getResponse');

        $this->events->expects($this->never())
            ->method('trigger');

        $this->object->onBootstrap($this->event);
    }

    /**
     * @covers WebinoCanonicalRedirect\Module::onBootstrap
     */
    public function testOnBootstrapCanonicalizerDisabled()
    {
        $this->event->expects($this->any())
            ->method('getRequest')
            ->will($this->returnValue($this->request));

        $this->options->expects($this->once())
            ->method('isEnabled')
            ->will($this->returnValue(false));

        $this->canonicalizer->expects($this->never())
            ->method('www');

        $this->canonicalizer->expects($this->never())
            ->method('trailingSlash');

        $this->canonicalizer->expects($this->never())
            ->method('isCanonicalized')
            ->will($this->returnValue(false));

        $this->event->expects($this->never())
            ->method('stopPropagation');

        $this->event->expects($this->never())
            ->method('getResponse');

        $this->events->expects($this->never())
            ->method('trigger');

        $this->object->onBootstrap($this->event);
    }

    /**
     * @covers WebinoCanonicalRedirect\Module::onBootstrap
     */
    public function testOnBootstrapNoHttpRequest()
    {
        $this->event->expects($this->any())
            ->method('getRequest')
            ->will($this->returnValue(null));

        $this->options->expects($this->once())
            ->method('isEnabled')
            ->will($this->returnValue(true));

        $this->canonicalizer->expects($this->never())
            ->method('www');

        $this->canonicalizer->expects($this->never())
            ->method('trailingSlash');

        $this->canonicalizer->expects($this->never())
            ->method('isCanonicalized')
            ->will($this->returnValue(false));

        $this->event->expects($this->never())
            ->method('stopPropagation');

        $this->event->expects($this->never())
            ->method('getResponse');

        $this->events->expects($this->never())
            ->method('trigger');

        $this->object->onBootstrap($this->event);
    }
}
