<?php
/**
 * Webino (http://webino.sk)
 *
 * @link        https://github.com/webino/WebinoCanonicalRedirect for the canonical source repository
 * @copyright   Copyright (c) 2013 Webino, s. r. o. (http://webino.sk)
 * @author      Peter Bačinský <peter@bacinsky.sk>
 * @license     New BSD License
 */

namespace WebinoCanonicalRedirect\Uri;

use Exception;

/**
 * Generated by PHPUnit on 2013-02-16 at 12:32:36.
 */
class CanonicalizerTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Canonicalizer
     */
    protected $object;

    /**
     * @var \PHPUnit_Framework_MockObject_MockObject
     */
    protected $uri;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->uri    = $this->getMock('Zend\Uri\Uri');
        $this->object = new Canonicalizer($this->uri);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * @covers WebinoCanonicalRedirect\Uri\Canonicalizer::__construct
     * @covers WebinoCanonicalRedirect\Uri\Canonicalizer::isCanonicalized
     */
    public function testIsNotCanonicalized()
    {
        $this->uri->expects($this->once())
            ->method('getPath')
            ->will($this->returnValue(''));

        $canonicalizer = new Canonicalizer($this->uri);
        $this->assertFalse($canonicalizer->isCanonicalized());
    }

    /**
     * @covers WebinoCanonicalRedirect\Uri\Canonicalizer::__construct
     * @covers WebinoCanonicalRedirect\Uri\Canonicalizer::isCanonicalized
     */
    public function testIsCanonicalizedCostOfIndexPhp()
    {
        $this->uri->expects($this->once())
            ->method('getPath')
            ->will($this->returnValue('/index.php'));

        $this->uri->expects($this->once())
            ->method('setPath')
            ->will($this->returnValue(''));

        $canonicalizer = new Canonicalizer($this->uri);
        $this->assertTrue($canonicalizer->isCanonicalized());
    }

    /**
     * @covers WebinoCanonicalRedirect\Uri\Canonicalizer::www
     */
    public function testWwwUseHas()
    {
        $this->uri->expects($this->once())
            ->method('getHost')
            ->will($this->returnValue('www.example.com'));

        $this->uri->expects($this->never())
            ->method('setHost');

        $this->object->www(true);
        $this->assertFalse($this->object->isCanonicalized());
    }

    /**
     * @covers WebinoCanonicalRedirect\Uri\Canonicalizer::www
     */
    public function testWwwUseHasNot()
    {
        $this->uri->expects($this->once())
            ->method('getHost')
            ->will($this->returnValue('example.com'));

        $this->uri->expects($this->once())
            ->method('setHost')
            ->with('www.example.com');

        $this->object->www(true);
        $this->assertTrue($this->object->isCanonicalized());
    }

    /**
     * @covers WebinoCanonicalRedirect\Uri\Canonicalizer::www
     */
    public function testWwwUseSubdomain()
    {
        $this->uri->expects($this->once())
            ->method('getHost')
            ->will($this->returnValue('sub.example.com'));

        $this->uri->expects($this->never())
            ->method('setHost');

        $this->object->www(true);
        $this->assertFalse($this->object->isCanonicalized());
    }

    /**
     * @covers WebinoCanonicalRedirect\Uri\Canonicalizer::www
     */
    public function testWwwUseNotHas()
    {
        $this->uri->expects($this->once())
            ->method('getHost')
            ->will($this->returnValue('www.example.com'));

        $this->uri->expects($this->once())
            ->method('setHost')
            ->with('example.com');

        $this->object->www(false);
        $this->assertTrue($this->object->isCanonicalized());
    }

    /**
     * @covers WebinoCanonicalRedirect\Uri\Canonicalizer::www
     */
    public function testWwwUseNotHasNot()
    {
        $this->uri->expects($this->once())
            ->method('getHost')
            ->will($this->returnValue('example.com'));

        $this->uri->expects($this->never())
            ->method('setHost');

        $this->object->www(false);
        $this->assertFalse($this->object->isCanonicalized());
    }

    /**
     * @covers WebinoCanonicalRedirect\Uri\Canonicalizer::www
     */
    public function testWwwUseNotSubdomain()
    {
        $this->uri->expects($this->once())
            ->method('getHost')
            ->will($this->returnValue('sub.example.com'));

        $this->uri->expects($this->never())
            ->method('setHost');

        $this->object->www(false);
        $this->assertFalse($this->object->isCanonicalized());
    }

    /**
     * @covers WebinoCanonicalRedirect\Uri\Canonicalizer::trailingSlash
     */
    public function testTrailingSlashUseHas()
    {
        $this->uri->expects($this->once())
            ->method('getPath')
            ->will($this->returnValue('path/'));

        $this->uri->expects($this->never())
            ->method('setPath');

        $this->object->trailingSlash(true);
        $this->assertFalse($this->object->isCanonicalized());
    }

    /**
     * @covers WebinoCanonicalRedirect\Uri\Canonicalizer::trailingSlash
     */
    public function testTrailingSlashUseHasNot()
    {
        $this->uri->expects($this->once())
            ->method('getPath')
            ->will($this->returnValue('path'));

        $this->uri->expects($this->once())
            ->method('setPath')
            ->with('/path/');

        $this->object->trailingSlash(true);
        $this->assertTrue($this->object->isCanonicalized());
    }

    /**
     * @covers WebinoCanonicalRedirect\Uri\Canonicalizer::trailingSlash
     */
    public function testTrailingSlashUseNotHas()
    {
        $this->uri->expects($this->once())
            ->method('getPath')
            ->will($this->returnValue('path/'));

        $this->uri->expects($this->once())
            ->method('setPath')
            ->with('/path');

        $this->object->trailingSlash(false);
        $this->assertTrue($this->object->isCanonicalized());
    }

    /**
     * @covers WebinoCanonicalRedirect\Uri\Canonicalizer::trailingSlash
     */
    public function testTrailingSlashUseNotHasNot()
    {
        $this->uri->expects($this->once())
            ->method('getPath')
            ->will($this->returnValue('path'));

        $this->uri->expects($this->never())
            ->method('setPath');

        $this->object->trailingSlash(false);
        $this->assertFalse($this->object->isCanonicalized());
    }

    /**
     * @covers WebinoCanonicalRedirect\Uri\Canonicalizer::trailingSlash
     */
    public function testTrailingSlashPathEqualsBaseUrl()
    {
        $baseUrl = '/base-url/';

        $this->uri->expects($this->exactly(2))
            ->method('getPath')
            ->will($this->returnValue($baseUrl));

        $this->uri->expects($this->never())
            ->method('setPath');

        $canonicalizer = new Canonicalizer($this->uri, $baseUrl);
        $canonicalizer->trailingSlash(true);
        $this->assertFalse($canonicalizer->isCanonicalized());
    }

    /**
     * @covers WebinoCanonicalRedirect\Uri\Canonicalizer::trailingSlash
     */
    public function testTrailingSlashEmptyPath()
    {
        $this->uri->expects($this->once())
            ->method('getPath')
            ->will($this->returnValue(''));

        $this->uri->expects($this->never())
            ->method('setPath');

        $this->object->trailingSlash(true);
        $this->assertFalse($this->object->isCanonicalized());
    }

    /**
     * @covers WebinoCanonicalRedirect\Uri\Canonicalizer::toString
     */
    public function testToString()
    {
        $expected = 'expected-uri';

        $this->uri->expects($this->once())
            ->method('toString')
            ->will($this->returnValue($expected));

        $uri = $this->object->toString();
        $this->assertSame($expected, $uri);
    }

    /**
     * @covers WebinoCanonicalRedirect\Uri\Canonicalizer::__toString
     */
    public function testMagicToString()
    {
        $expected = 'expected-uri';

        $this->uri->expects($this->once())
            ->method('toString')
            ->will($this->returnValue($expected));

        $this->assertSame($expected, (string) $this->object);
    }

    /**
     * @covers WebinoCanonicalRedirect\Uri\Canonicalizer::__toString
     */
    public function testMagicToStringThorwsException()
    {
        $this->uri->expects($this->once())
            ->method('toString')
            ->will($this->throwException(new Exception));

        $this->assertSame('', (string) $this->object);
    }
}
