<?php
/**
 * Webino (http://webino.sk)
 *
 * @link        https://github.com/webino/WebinoCanonicalRedirect for the canonical source repository
 * @copyright   Copyright (c) 2013 Webino, s. r. o. (http://webino.sk)
 * @author      Peter Bačinský <peter@bacinsky.sk>
 * @license     New BSD License
 */

namespace WebinoCanonicalRedirect\Uri;

/**
 * Test class for Normalize.
 * Generated by PHPUnit on 2013-02-16 at 12:32:36.
 */
class CanonicalizerTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Normalize
     */
    protected $object;

    /**
     * @var Zend\Uri\Uri
     */
    protected $uri;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->uri    = $this->getMock('Zend\Uri\Uri');
        $this->object = new Canonicalizer($this->uri);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * @covers WebinoCanonicalRedirect\Uri\Canonicalizer::getIsNormalized
     * @todo Implement testGetIsCanonicalized().
     */
    public function testGetIsCanonicalized()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers WebinoCanonicalRedirect\Uri\Canonicalizer::www
     */
    public function testWwwUseHas()
    {
        $this->uri->expects($this->once())
            ->method('getHost')
            ->will($this->returnValue('www.example.com'));

        $this->uri->expects($this->never())
            ->method('setHost');

        $this->object->www(true);
    }

    /**
     * @covers WebinoCanonicalRedirect\Uri\Canonicalizer::www
     */
    public function testWwwUseHasNot()
    {
        $this->uri->expects($this->once())
            ->method('getHost')
            ->will($this->returnValue('example.com'));

        $this->uri->expects($this->once())
            ->method('setHost')
            ->with('www.example.com');

        $this->object->www(true);
    }

    /**
     * @covers WebinoCanonicalRedirect\Uri\Canonicalizer::www
     */
    public function testWwwUseSubdomain()
    {
        $this->uri->expects($this->once())
            ->method('getHost')
            ->will($this->returnValue('sub.example.com'));

        $this->uri->expects($this->never())
            ->method('setHost');

        $this->object->www(true);
    }

    /**
     * @covers WebinoCanonicalRedirect\Uri\Canonicalizer::www
     */
    public function testWwwUseNotHas()
    {
        $this->uri->expects($this->once())
            ->method('getHost')
            ->will($this->returnValue('www.example.com'));

        $this->uri->expects($this->once())
            ->method('setHost')
            ->with('example.com');

        $this->object->www(false);
    }

    /**
     * @covers WebinoCanonicalRedirect\Uri\Canonicalizer::www
     */
    public function testWwwUseNotHasNot()
    {
        $this->uri->expects($this->once())
            ->method('getHost')
            ->will($this->returnValue('example.com'));

        $this->uri->expects($this->never())
            ->method('setHost');

        $this->object->www(false);
    }

    /**
     * @covers WebinoCanonicalRedirect\Uri\Canonicalizer::www
     */
    public function testWwwUseNotSubdomain()
    {
        $this->uri->expects($this->once())
            ->method('getHost')
            ->will($this->returnValue('sub.example.com'));

        $this->uri->expects($this->once())
            ->method('setHost')
            ->with('sub.example.com');

        $this->object->www(false);
    }

    /**
     * @covers WebinoCanonicalRedirect\Uri\Canonicalizer::trailingSlash
     * @todo Implement testTrailingSlash().
     */
    public function testTrailingSlash()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers WebinoCanonicalRedirect\Uri\Canonicalizer::toString
     * @todo Implement testToString().
     */
    public function testToString()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers WebinoCanonicalRedirect\Uri\Canonicalizer::__toString
     * @todo Implement testMagicTooString().
     */
    public function testMagicToString()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }
}
